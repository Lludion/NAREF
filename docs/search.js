window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "naref", "modulename": "naref", "kind": "module", "doc": "<p>A quantum &amp; classical reservoir handler for Temporal Series Prediction.</p>\n"}, {"fullname": "naref.abstract", "modulename": "naref.abstract", "kind": "module", "doc": "<p>Defines the abstract classes Forecaster and Hyper</p>\n"}, {"fullname": "naref.abstract.Forecaster", "modulename": "naref.abstract", "qualname": "Forecaster", "kind": "class", "doc": "<p>Abstract class containing functions implemented by QRC, CRC, LinReg classes</p>\n"}, {"fullname": "naref.abstract.Forecaster.__init__", "modulename": "naref.abstract", "qualname": "Forecaster.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">input_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;unknown&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">train_len</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">test_len</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span>)</span>"}, {"fullname": "naref.abstract.Forecaster.header", "modulename": "naref.abstract", "qualname": "Forecaster.header", "kind": "variable", "doc": "<p></p>\n", "default_value": "[]"}, {"fullname": "naref.abstract.Forecaster.name", "modulename": "naref.abstract", "qualname": "Forecaster.name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "naref.abstract.Forecaster.longname", "modulename": "naref.abstract", "qualname": "Forecaster.longname", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "naref.abstract.Forecaster.y_data_train", "modulename": "naref.abstract", "qualname": "Forecaster.y_data_train", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list"}, {"fullname": "naref.abstract.Forecaster.y_pred_train", "modulename": "naref.abstract", "qualname": "Forecaster.y_pred_train", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list"}, {"fullname": "naref.abstract.Forecaster.y_data_test", "modulename": "naref.abstract", "qualname": "Forecaster.y_data_test", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list"}, {"fullname": "naref.abstract.Forecaster.y_pred_test", "modulename": "naref.abstract", "qualname": "Forecaster.y_pred_test", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list"}, {"fullname": "naref.abstract.Forecaster.rmtrain", "modulename": "naref.abstract", "qualname": "Forecaster.rmtrain", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict"}, {"fullname": "naref.abstract.Forecaster.rmtest", "modulename": "naref.abstract", "qualname": "Forecaster.rmtest", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict"}, {"fullname": "naref.abstract.Forecaster.input_type", "modulename": "naref.abstract", "qualname": "Forecaster.input_type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "naref.abstract.Forecaster.train_len", "modulename": "naref.abstract", "qualname": "Forecaster.train_len", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "naref.abstract.Forecaster.test_len", "modulename": "naref.abstract", "qualname": "Forecaster.test_len", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "naref.abstract.Forecaster.verbose", "modulename": "naref.abstract", "qualname": "Forecaster.verbose", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "naref.abstract.Forecaster.get_scores", "modulename": "naref.abstract", "qualname": "Forecaster.get_scores", "kind": "function", "doc": "<p>Calculate train and test score of the quantum reservoir and updates rmtest &amp; rmtrain</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "naref.abstract.Forecaster.announce_build", "modulename": "naref.abstract", "qualname": "Forecaster.announce_build", "kind": "function", "doc": "<p>Displays a message stating that we are building the model.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "naref.abstract.Forecaster.get_error_train", "modulename": "naref.abstract", "qualname": "Forecaster.get_error_train", "kind": "function", "doc": "<p>Evaluates the training error.\nNone of the variables used are modified by the testing phase.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "naref.abstract.Forecaster.get_error_test", "modulename": "naref.abstract", "qualname": "Forecaster.get_error_test", "kind": "function", "doc": "<p>Evaluates the testing error.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "naref.abstract.Forecaster.show_test_prediction", "modulename": "naref.abstract", "qualname": "Forecaster.show_test_prediction", "kind": "function", "doc": "<p>Shows how close are self.y_pred_test and self.y_data_test</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "naref.abstract.Forecaster.show_train_prediction", "modulename": "naref.abstract", "qualname": "Forecaster.show_train_prediction", "kind": "function", "doc": "<p>Shows how close are self.y_pred_train and self.y_data_train</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "naref.abstract.Forecaster.build_model", "modulename": "naref.abstract", "qualname": "Forecaster.build_model", "kind": "function", "doc": "<p>Updates the inner model and returns the predicted test values after fitting on the train\nArgs:\n        inp_train: input train datasest (a temporal serie)\n        inp_test: input test datasest (a temporal serie)</p>\n\n<p>Returns:\n        the predicted test values after fitting on the train ( y_pred_test )</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">inp_train</span><span class=\"p\">:</span> <span class=\"nb\">list</span>, </span><span class=\"param\"><span class=\"n\">inp_test</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "naref.abstract.Forecaster.save_data", "modulename": "naref.abstract", "qualname": "Forecaster.save_data", "kind": "function", "doc": "<p>Saves the contents of the qrc to a csv file</p>\n\n<p>Args:\n        overwrite: whether to overwrite the file where we would write data, or just append at the end\n        dic: dictionnary containing the contents of a row of data, corresponding to the header\n        fname: file name\n        header: names of the columns</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">overwrite</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">dic</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">fname</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;default&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">header</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "naref.abstract.Hyper", "modulename": "naref.abstract", "qualname": "Hyper", "kind": "class", "doc": "<p>Abstract hyperparameter search class containing functions implemented by HyperC and HyperQ</p>\n"}, {"fullname": "naref.abstract.Hyper.__init__", "modulename": "naref.abstract", "qualname": "Hyper.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">sample_len_list</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">input_type_list</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">train_len_list</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">test_len_list</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span>)</span>"}, {"fullname": "naref.abstract.Hyper.lists", "modulename": "naref.abstract", "qualname": "Hyper.lists", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "naref.abstract.Hyper.k", "modulename": "naref.abstract", "qualname": "Hyper.k", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "naref.abstract.Hyper.tot_combin", "modulename": "naref.abstract", "qualname": "Hyper.tot_combin", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "naref.abstract.Hyper.current", "modulename": "naref.abstract", "qualname": "Hyper.current", "kind": "variable", "doc": "<p></p>\n", "annotation": ": naref.abstract.Forecaster"}, {"fullname": "naref.abstract.Hyper.verbose", "modulename": "naref.abstract", "qualname": "Hyper.verbose", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "naref.abstract.Hyper.search", "modulename": "naref.abstract", "qualname": "Hyper.search", "kind": "function", "doc": "<p>Iterates on all possible combinations of parameters in self.lists and adds a line to the relevant csv for each</p>\n\n<p>Returns:\n        all results in a csv file</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "naref.abstract.Hyper.test_parameters", "modulename": "naref.abstract", "qualname": "Hyper.test_parameters", "kind": "function", "doc": "<p>Tests a set of parameters by updating self.current and calling save_parameters\nArgs:\n        *tup: iterable of parameters</p>\n\n<p>Returns:\n        all results in a csv file</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">tup</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "naref.abstract.Hyper.save_parameters", "modulename": "naref.abstract", "qualname": "Hyper.save_parameters", "kind": "function", "doc": "<p>Builds self.current and then appends relevant data in a file\nReturns:\n        all results in a csv file</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "naref.abstract.Hyper.print", "modulename": "naref.abstract", "qualname": "Hyper.print", "kind": "function", "doc": "<p>Wrapper for the print function taking verbosity into account</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">a</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">k</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "naref.classical", "modulename": "naref.classical", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "naref.classical.crc", "modulename": "naref.classical.crc", "kind": "module", "doc": "<p>Defines the CRC and LinearRegression classes (classical TSP)</p>\n"}, {"fullname": "naref.classical.crc.warp_dataset", "modulename": "naref.classical.crc", "qualname": "warp_dataset", "kind": "function", "doc": "<p>Transforms the dataset to fit its own input style in build_baseline_model\nArgs:\n        inp_train: input train datasest (a temporal serie)\n        inp_test: input test datasest (a temporal serie)</p>\n\n<p>Returns:\n        the 4-tuple :\n        (x_train = inp_train[:-1]\n        y_train = inp_train[1:]\n        x_test = inp_test[:-1]\n        y_test = inp_test[1:])</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">inp_train</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">inp_test</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">) -> (&lt;class &#x27;list&#x27;&gt;, &lt;class &#x27;list&#x27;&gt;, &lt;class &#x27;list&#x27;&gt;, &lt;class &#x27;list&#x27;&gt;):</span></span>", "funcdef": "def"}, {"fullname": "naref.classical.crc.LinReg", "modulename": "naref.classical.crc", "qualname": "LinReg", "kind": "class", "doc": "<p>Abstract class containing functions implemented by QRC, CRC, LinReg classes</p>\n", "bases": "naref.abstract.Forecaster"}, {"fullname": "naref.classical.crc.LinReg.__init__", "modulename": "naref.classical.crc", "qualname": "LinReg.__init__", "kind": "function", "doc": "<p>Class containing Linear Regression model. It is used as the baseline model for comparisons.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">verbose</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span>)</span>"}, {"fullname": "naref.classical.crc.LinReg.name", "modulename": "naref.classical.crc", "qualname": "LinReg.name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "naref.classical.crc.LinReg.longname", "modulename": "naref.classical.crc", "qualname": "LinReg.longname", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "naref.classical.crc.LinReg.model", "modulename": "naref.classical.crc", "qualname": "LinReg.model", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "naref.classical.crc.LinReg.build_model", "modulename": "naref.classical.crc", "qualname": "LinReg.build_model", "kind": "function", "doc": "<p>Updates the inner model and returns the predicted test values after fitting on the train\nArgs:\n        inp_train: input train datasest (a temporal serie)\n        inp_test: input test datasest (a temporal serie)</p>\n\n<p>Returns:\n        the predicted test values after fitting on the train ( y_pred_test )</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">inp_train</span><span class=\"p\">:</span> <span class=\"nb\">list</span>, </span><span class=\"param\"><span class=\"n\">inp_test</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "naref.classical.crc.CRC", "modulename": "naref.classical.crc", "qualname": "CRC", "kind": "class", "doc": "<p>Abstract class containing functions implemented by QRC, CRC, LinReg classes</p>\n", "bases": "naref.abstract.Forecaster"}, {"fullname": "naref.classical.crc.CRC.__init__", "modulename": "naref.classical.crc", "qualname": "CRC.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">sample_len</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">8</span>,</span><span class=\"param\">\t<span class=\"n\">nb_neurons</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">9</span>,</span><span class=\"param\">\t<span class=\"n\">input_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;mackey&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">train_len</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">250</span>,</span><span class=\"param\">\t<span class=\"n\">test_len</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">30</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span>)</span>"}, {"fullname": "naref.classical.crc.CRC.header", "modulename": "naref.classical.crc", "qualname": "CRC.header", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;sample_len&#x27;, &#x27;nb_neurons&#x27;, &#x27;input_type&#x27;, &#x27;train_len&#x27;, &#x27;test_len&#x27;, &#x27;train_mae&#x27;, &#x27;test_mae&#x27;]"}, {"fullname": "naref.classical.crc.CRC.name", "modulename": "naref.classical.crc", "qualname": "CRC.name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "naref.classical.crc.CRC.longname", "modulename": "naref.classical.crc", "qualname": "CRC.longname", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "naref.classical.crc.CRC.sample_len", "modulename": "naref.classical.crc", "qualname": "CRC.sample_len", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "naref.classical.crc.CRC.nb_neurons", "modulename": "naref.classical.crc", "qualname": "CRC.nb_neurons", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "naref.classical.crc.CRC.input_type", "modulename": "naref.classical.crc", "qualname": "CRC.input_type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "naref.classical.crc.CRC.train_len", "modulename": "naref.classical.crc", "qualname": "CRC.train_len", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "naref.classical.crc.CRC.test_len", "modulename": "naref.classical.crc", "qualname": "CRC.test_len", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "naref.classical.crc.CRC.model", "modulename": "naref.classical.crc", "qualname": "CRC.model", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "naref.classical.crc.CRC.build_model", "modulename": "naref.classical.crc", "qualname": "CRC.build_model", "kind": "function", "doc": "<p>Updates the inner model and returns the predicted test values after fitting on the train\nArgs:\n        inp_train: input train datasest (a temporal serie)\n        inp_test: input test datasest (a temporal serie)</p>\n\n<p>Returns:\n        the predicted test values after fitting on the train ( y_pred_test )</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">inp_train</span><span class=\"p\">:</span> <span class=\"nb\">list</span>, </span><span class=\"param\"><span class=\"n\">inp_test</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "naref.classical.crc.CRC.save_data", "modulename": "naref.classical.crc", "qualname": "CRC.save_data", "kind": "function", "doc": "<p>Saves the contents of the qrc to a csv file</p>\n\n<p>Args:\n        overwrite: whether to overwrite the file where we would write data, or just append at the end\n        other arguments are ignored</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">overwrite</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">a</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "naref.classical.hyper", "modulename": "naref.classical.hyper", "kind": "module", "doc": "<p>Defines the HyperC class, finding hyperparameters for the CRC class</p>\n"}, {"fullname": "naref.classical.hyper.HyperC", "modulename": "naref.classical.hyper", "qualname": "HyperC", "kind": "class", "doc": "<p>Abstract hyperparameter search class containing functions implemented by HyperC and HyperQ</p>\n", "bases": "naref.abstract.Hyper"}, {"fullname": "naref.classical.hyper.HyperC.__init__", "modulename": "naref.classical.hyper", "qualname": "HyperC.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">sample_len_list</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">nb_neurons_list</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">input_type_list</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">train_len_list</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">test_len_list</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span>)</span>"}, {"fullname": "naref.classical.hyper.HyperC.test_parameters", "modulename": "naref.classical.hyper", "qualname": "HyperC.test_parameters", "kind": "function", "doc": "<p>Tests a set of parameters by updating self.current and calling save_parameters\nArgs:\n        *tup: iterable of parameters</p>\n\n<p>Returns:\n        all results in a csv file</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">tup</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "naref.comp", "modulename": "naref.comp", "kind": "module", "doc": "<p>Defines the Comparator class</p>\n"}, {"fullname": "naref.comp.ErrorComparator", "modulename": "naref.comp", "qualname": "ErrorComparator", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "naref.comp.ErrorComparator.__init__", "modulename": "naref.comp", "qualname": "ErrorComparator.__init__", "kind": "function", "doc": "<p>Provides a framework comparing all available Forecasters for all available metrics.\nArgs:\n        active: list of Forecasters that we want to study\n        auto_train: whether to automatically train active Forecasters. Set to false if only interested in energy.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">active</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">auto_train</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span>)</span>"}, {"fullname": "naref.comp.ErrorComparator.active", "modulename": "naref.comp", "qualname": "ErrorComparator.active", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "naref.comp.ErrorComparator.frc", "modulename": "naref.comp", "qualname": "ErrorComparator.frc", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "naref.comp.ErrorComparator.qrc", "modulename": "naref.comp", "qualname": "ErrorComparator.qrc", "kind": "variable", "doc": "<p></p>\n", "annotation": ": naref.quantum.qrc.QRC"}, {"fullname": "naref.comp.ErrorComparator.lrg", "modulename": "naref.comp", "qualname": "ErrorComparator.lrg", "kind": "variable", "doc": "<p></p>\n", "annotation": ": naref.classical.crc.LinReg"}, {"fullname": "naref.comp.ErrorComparator.crc", "modulename": "naref.comp", "qualname": "ErrorComparator.crc", "kind": "variable", "doc": "<p></p>\n", "annotation": ": naref.classical.crc.CRC"}, {"fullname": "naref.comp.ErrorComparator.train", "modulename": "naref.comp", "qualname": "ErrorComparator.train", "kind": "function", "doc": "<p>Builds the Forecaster's attributes according to contents of the data module</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "naref.comp.ErrorComparator.compare", "modulename": "naref.comp", "qualname": "ErrorComparator.compare", "kind": "function", "doc": "<p>Prints errors for all active forecasters and displays their forecast as pyplot curves</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "naref.comp.Comparator", "modulename": "naref.comp", "qualname": "Comparator", "kind": "class", "doc": "<p></p>\n", "bases": "ErrorComparator"}, {"fullname": "naref.comp.Comparator.__init__", "modulename": "naref.comp", "qualname": "Comparator.__init__", "kind": "function", "doc": "<p>Provides a framework comparing all available Forecasters for all available metrics.\nArgs:\n        active: list of Forecasters that we want to study\n        auto_train: whether to automatically train active Forecasters. Set to false if only interested in energy.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dataset_sizes</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">a</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">k</span></span>)</span>"}, {"fullname": "naref.comp.Comparator.dataset_sizes", "modulename": "naref.comp", "qualname": "Comparator.dataset_sizes", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "naref.comp.Comparator.S", "modulename": "naref.comp", "qualname": "Comparator.S", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "naref.comp.Comparator.T_pulse", "modulename": "naref.comp", "qualname": "Comparator.T_pulse", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "naref.comp.Comparator.N_runs", "modulename": "naref.comp", "qualname": "Comparator.N_runs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "naref.comp.Comparator.E_Fresnel", "modulename": "naref.comp", "qualname": "Comparator.E_Fresnel", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "naref.comp.Comparator.E_Rubi", "modulename": "naref.comp", "qualname": "Comparator.E_Rubi", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "naref.comp.Comparator.E_GPU", "modulename": "naref.comp", "qualname": "Comparator.E_GPU", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "naref.comp.Comparator.E_Joliot", "modulename": "naref.comp", "qualname": "Comparator.E_Joliot", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "naref.comp.Comparator.qtime", "modulename": "naref.comp", "qualname": "Comparator.qtime", "kind": "function", "doc": "<p>We precisely calculated this value with information given by PASQAL (refresh rate, etc.)\nArgs:\n        L: dataset size\nReturns:\n        Multiplicative coefficient to get the consumption of a quantum device for this dataset size</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">L</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "naref.comp.Comparator.rtime", "modulename": "naref.comp", "qualname": "Comparator.rtime", "kind": "function", "doc": "<p>We could divide by 10 the value of qtime, as it is what is done by default in the Excel file and as this\ncomputer has a cryostat, but we cannot know for sure. As in the .pdf file, we set it equal to the qtime.\nArgs:\n        L: dataset size\nReturns:\n        Multiplicative coefficient to get the consumption of a quantum device for this dataset size</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">L</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "naref.comp.Comparator.ctime", "modulename": "naref.comp", "qualname": "Comparator.ctime", "kind": "function", "doc": "<p>Args:\n        L: dataset size\nReturns:\n        Multiplicative coefficient to get the consumption of a classical GPU device for this dataset size</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">L</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "naref.comp.Comparator.jtime", "modulename": "naref.comp", "qualname": "Comparator.jtime", "kind": "function", "doc": "<p>Multiplicative coefficient to get the consumption of a typical classical HPC device (Joliot)\nfor this dataset size\nArgs:\n        L: dataset size\nReturns:\n        the multiplicative coefficient</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">L</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "naref.comp.Comparator.energy", "modulename": "naref.comp", "qualname": "Comparator.energy", "kind": "function", "doc": "<p>Computes the energy consumption for each device and each potential dataset size\nAnd then plots it</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "naref.comp.Comparator.compute_energy", "modulename": "naref.comp", "qualname": "Comparator.compute_energy", "kind": "function", "doc": "<p>Computes the energy consumption for each device and each potential dataset size</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "naref.comp.Comparator.plot_energy", "modulename": "naref.comp", "qualname": "Comparator.plot_energy", "kind": "function", "doc": "<p>Plots the energy that has been computed in compute_energy</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "naref.comp.Comparator.emissions_duration", "modulename": "naref.comp", "qualname": "Comparator.emissions_duration", "kind": "function", "doc": "<p>Considering the same values as before, we can derive the different method times and their carbon emissions\nfor a typical dataset size</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "naref.constants", "modulename": "naref.constants", "kind": "module", "doc": "<p>Defines various global variables</p>\n"}, {"fullname": "naref.constants.VERBOSE", "modulename": "naref.constants", "qualname": "VERBOSE", "kind": "variable", "doc": "<p></p>\n", "default_value": "True"}, {"fullname": "naref.constants.MAIN_PATH", "modulename": "naref.constants", "qualname": "MAIN_PATH", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;./results&#x27;"}, {"fullname": "naref.constants.FEEDBACK_INTERVAL", "modulename": "naref.constants", "qualname": "FEEDBACK_INTERVAL", "kind": "variable", "doc": "<p></p>\n", "default_value": "10"}, {"fullname": "naref.constants.DEFAULT_SEED", "modulename": "naref.constants", "qualname": "DEFAULT_SEED", "kind": "variable", "doc": "<p></p>\n", "default_value": "0"}, {"fullname": "naref.constants.PULSER_DEVICE", "modulename": "naref.constants", "qualname": "PULSER_DEVICE", "kind": "variable", "doc": "<p></p>\n", "default_value": "Chadoq2"}, {"fullname": "naref.constants.ERROR_METRIC", "modulename": "naref.constants", "qualname": "ERROR_METRIC", "kind": "function", "doc": "<p>Mean absolute error regression loss.</p>\n\n<p>Read more in the :ref:<code>User Guide &lt;mean_absolute_error&gt;</code>.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>y_true : array-like of shape (n_samples,) or (n_samples, n_outputs)\n    Ground truth (correct) target values.</p>\n\n<p>y_pred : array-like of shape (n_samples,) or (n_samples, n_outputs)\n    Estimated target values.</p>\n\n<p>sample_weight : array-like of shape (n_samples,), default=None\n    Sample weights.</p>\n\n<p>multioutput : {'raw_values', 'uniform_average'}  or array-like of shape             (n_outputs,), default='uniform_average'\n    Defines aggregating of multiple output values.\n    Array-like value defines weights used to average errors.</p>\n\n<pre><code>'raw_values' :\n    Returns a full set of errors in case of multioutput input.\n\n'uniform_average' :\n    Errors of all outputs are averaged with uniform weight.\n</code></pre>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>loss : float or ndarray of floats\n    If multioutput is 'raw_values', then mean absolute error is returned\n    for each output separately.\n    If multioutput is 'uniform_average' or an ndarray of weights, then the\n    weighted average of all output errors is returned.</p>\n\n<pre><code>MAE output is non-negative floating point. The best value is 0.0.\n</code></pre>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sklearn.metrics</span> <span class=\"kn\">import</span> <span class=\"n\">mean_absolute_error</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">y_true</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">y_pred</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mf\">2.5</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">mean_absolute_error</span><span class=\"p\">(</span><span class=\"n\">y_true</span><span class=\"p\">,</span> <span class=\"n\">y_pred</span><span class=\"p\">)</span>\n<span class=\"go\">0.5</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">y_true</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">6</span><span class=\"p\">]]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">y_pred</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">5</span><span class=\"p\">]]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">mean_absolute_error</span><span class=\"p\">(</span><span class=\"n\">y_true</span><span class=\"p\">,</span> <span class=\"n\">y_pred</span><span class=\"p\">)</span>\n<span class=\"go\">0.75</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">mean_absolute_error</span><span class=\"p\">(</span><span class=\"n\">y_true</span><span class=\"p\">,</span> <span class=\"n\">y_pred</span><span class=\"p\">,</span> <span class=\"n\">multioutput</span><span class=\"o\">=</span><span class=\"s1\">&#39;raw_values&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">array([0.5, 1. ])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">mean_absolute_error</span><span class=\"p\">(</span><span class=\"n\">y_true</span><span class=\"p\">,</span> <span class=\"n\">y_pred</span><span class=\"p\">,</span> <span class=\"n\">multioutput</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mf\">0.3</span><span class=\"p\">,</span> <span class=\"mf\">0.7</span><span class=\"p\">])</span>\n<span class=\"go\">0.85...</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">y_true</span>, </span><span class=\"param\"><span class=\"n\">y_pred</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">sample_weight</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">multioutput</span><span class=\"o\">=</span><span class=\"s1\">&#39;uniform_average&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "naref.constants.ERR_BENCHMARK", "modulename": "naref.constants", "qualname": "ERR_BENCHMARK", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;mae&#x27;: &lt;function mean_absolute_error&gt;, &#x27;rmse&#x27;: &lt;function &lt;lambda&gt;&gt;, &#x27;r2&#x27;: &lt;function r2_score&gt;}"}, {"fullname": "naref.dataset", "modulename": "naref.dataset", "kind": "module", "doc": "<p>Defines the default data (mackey, sine ...) and initial Forecaster parameters</p>\n"}, {"fullname": "naref.dataset.Dataset", "modulename": "naref.dataset", "qualname": "Dataset", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "naref.dataset.Dataset.__init__", "modulename": "naref.dataset", "qualname": "Dataset.__init__", "kind": "function", "doc": "<p>This dataset class contains several variables representing a TSP dataset and reservoir parameters</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "naref.dataset.Dataset.input_type", "modulename": "naref.dataset", "qualname": "Dataset.input_type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "naref.dataset.Dataset.mackey", "modulename": "naref.dataset", "qualname": "Dataset.mackey", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "naref.dataset.Dataset.umackey", "modulename": "naref.dataset", "qualname": "Dataset.umackey", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "naref.dataset.Dataset.sine", "modulename": "naref.dataset", "qualname": "Dataset.sine", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "naref.dataset.Dataset.inp_train", "modulename": "naref.dataset", "qualname": "Dataset.inp_train", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "naref.dataset.Dataset.inp_test", "modulename": "naref.dataset", "qualname": "Dataset.inp_test", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "naref.dataset.Dataset.train_len", "modulename": "naref.dataset", "qualname": "Dataset.train_len", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "naref.dataset.Dataset.test_len", "modulename": "naref.dataset", "qualname": "Dataset.test_len", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "naref.dataset.Dataset.sample_len", "modulename": "naref.dataset", "qualname": "Dataset.sample_len", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "naref.dataset.Dataset.nb_neurons", "modulename": "naref.dataset", "qualname": "Dataset.nb_neurons", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "naref.dataset.Dataset.nb_atoms", "modulename": "naref.dataset", "qualname": "Dataset.nb_atoms", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "naref.dataset.Dataset.inp_duration", "modulename": "naref.dataset", "qualname": "Dataset.inp_duration", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "naref.dataset.Dataset.N_samples", "modulename": "naref.dataset", "qualname": "Dataset.N_samples", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "naref.dataset.Dataset.reset_rate", "modulename": "naref.dataset", "qualname": "Dataset.reset_rate", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "naref.dataset.Dataset.geometry", "modulename": "naref.dataset", "qualname": "Dataset.geometry", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "naref.dataset.Dataset.atom_distance", "modulename": "naref.dataset", "qualname": "Dataset.atom_distance", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "naref.dataset.Dataset.nb_neurons_list", "modulename": "naref.dataset", "qualname": "Dataset.nb_neurons_list", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "naref.dataset.Dataset.sample_len_list", "modulename": "naref.dataset", "qualname": "Dataset.sample_len_list", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "naref.dataset.Dataset.nb_atoms_list", "modulename": "naref.dataset", "qualname": "Dataset.nb_atoms_list", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "naref.dataset.Dataset.inp_duration_list", "modulename": "naref.dataset", "qualname": "Dataset.inp_duration_list", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "naref.dataset.Dataset.N_samples_list", "modulename": "naref.dataset", "qualname": "Dataset.N_samples_list", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "naref.dataset.Dataset.reset_rate_list", "modulename": "naref.dataset", "qualname": "Dataset.reset_rate_list", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "naref.dataset.Dataset.geometry_list", "modulename": "naref.dataset", "qualname": "Dataset.geometry_list", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "naref.dataset.Dataset.atom_distance_list", "modulename": "naref.dataset", "qualname": "Dataset.atom_distance_list", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "naref.dataset.Dataset.input_type_list", "modulename": "naref.dataset", "qualname": "Dataset.input_type_list", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "naref.dataset.Dataset.train_len_list", "modulename": "naref.dataset", "qualname": "Dataset.train_len_list", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "naref.dataset.Dataset.test_len_list", "modulename": "naref.dataset", "qualname": "Dataset.test_len_list", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "naref.dataset.Dataset.real_train_len", "modulename": "naref.dataset", "qualname": "Dataset.real_train_len", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "naref.dataset.Dataset.real_test_len", "modulename": "naref.dataset", "qualname": "Dataset.real_test_len", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "naref.dataset.Dataset.dataset_sizes", "modulename": "naref.dataset", "qualname": "Dataset.dataset_sizes", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "naref.dataset.Dataset.S", "modulename": "naref.dataset", "qualname": "Dataset.S", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "naref.dataset.Dataset.T_pulse", "modulename": "naref.dataset", "qualname": "Dataset.T_pulse", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "naref.dataset.Dataset.N_runs", "modulename": "naref.dataset", "qualname": "Dataset.N_runs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "naref.dataset.data", "modulename": "naref.dataset", "qualname": "data", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;naref.dataset.Dataset object&gt;"}, {"fullname": "naref.demo", "modulename": "naref.demo", "kind": "module", "doc": "<p>Defines reasonable demo-testing functions</p>\n"}, {"fullname": "naref.demo.fastest_hs", "modulename": "naref.demo", "qualname": "fastest_hs", "kind": "function", "doc": "<p>Fastest hyperparameter search\nReturns:\n        the completed HyperC and HyperQ object\n        all relevant info in csv files</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"return-annotation\">) -> (&lt;class &#x27;naref.classical.hyper.HyperC&#x27;&gt;, &lt;class &#x27;naref.quantum.hyper.HyperQ&#x27;&gt;):</span></span>", "funcdef": "def"}, {"fullname": "naref.demo.fast_hs", "modulename": "naref.demo", "qualname": "fast_hs", "kind": "function", "doc": "<p>Fast hyperparameter search\nReturns:\n        the completed HyperC and HyperQ object\n        all relevant info in csv files</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"return-annotation\">) -> (&lt;class &#x27;naref.classical.hyper.HyperC&#x27;&gt;, &lt;class &#x27;naref.quantum.hyper.HyperQ&#x27;&gt;):</span></span>", "funcdef": "def"}, {"fullname": "naref.demo.long_hs", "modulename": "naref.demo", "qualname": "long_hs", "kind": "function", "doc": "<p>Long hyperparameter search\nReturns:\n        the completed HyperC and HyperQ object\n        all relevant info in csv files</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"return-annotation\">) -> (&lt;class &#x27;naref.classical.hyper.HyperC&#x27;&gt;, &lt;class &#x27;naref.quantum.hyper.HyperQ&#x27;&gt;):</span></span>", "funcdef": "def"}, {"fullname": "naref.demo.demo_notebook", "modulename": "naref.demo", "qualname": "demo_notebook", "kind": "function", "doc": "<p>Function used for a typical demonstration.\nIt is made to be very fast, the predicted curves are imprecise</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "naref.metrics", "modulename": "naref.metrics", "kind": "module", "doc": "<p>Defines the auxiliary functions handling comparison methods</p>\n"}, {"fullname": "naref.metrics.errors", "modulename": "naref.metrics", "qualname": "errors", "kind": "function", "doc": "<p>Typically, ERR_BENCHMARK contains 'mae' 'rmse' and 'r2' errors.\nArgs:\n        vals: an iterable of floats\n        preds: an iterable of floats</p>\n\n<p>Returns:\n        a dictionary containing errors obtained when comparing vals &amp; preds (for all errors in ERR_BENCHMARK)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">vals</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"nb\">iter</span><span class=\"o\">&gt;</span>, </span><span class=\"param\"><span class=\"n\">preds</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"nb\">iter</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "naref.metrics.C_Fresnel", "modulename": "naref.metrics", "qualname": "C_Fresnel", "kind": "variable", "doc": "<p></p>\n", "default_value": "0.0036000000000000003"}, {"fullname": "naref.metrics.C_Rubi", "modulename": "naref.metrics", "qualname": "C_Rubi", "kind": "variable", "doc": "<p></p>\n", "default_value": "0.0315"}, {"fullname": "naref.metrics.C_GPU", "modulename": "naref.metrics", "qualname": "C_GPU", "kind": "variable", "doc": "<p></p>\n", "default_value": "8.999999999999999e-05"}, {"fullname": "naref.metrics.C_Joliot", "modulename": "naref.metrics", "qualname": "C_Joliot", "kind": "variable", "doc": "<p></p>\n", "default_value": "0.215"}, {"fullname": "naref.metrics.print_former_benchmarks", "modulename": "naref.metrics", "qualname": "print_former_benchmarks", "kind": "function", "doc": "<p>From PASQAL data, we noted above the emissions of each type of device in tCO2 eq/hour.\nWe can print that it is coherent with the given Excel document</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "naref.metrics.fct_L", "modulename": "naref.metrics", "qualname": "fct_L", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">L_tilde</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "naref.metrics.fct_S", "modulename": "naref.metrics", "qualname": "fct_S", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">L</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "naref.metrics.show_prediction", "modulename": "naref.metrics", "qualname": "show_prediction", "kind": "function", "doc": "<p>Shows how close are prea and real, plottable data</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pred</span><span class=\"p\">:</span> <span class=\"nb\">list</span>, </span><span class=\"param\"><span class=\"n\">real</span><span class=\"p\">:</span> <span class=\"nb\">list</span>, </span><span class=\"param\"><span class=\"n\">phase</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">longname</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "naref.quantum", "modulename": "naref.quantum", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "naref.quantum.hyper", "modulename": "naref.quantum.hyper", "kind": "module", "doc": "<p>Defines the HyperQ class, finding hyperparameters for the QRC class</p>\n"}, {"fullname": "naref.quantum.hyper.HyperQ", "modulename": "naref.quantum.hyper", "qualname": "HyperQ", "kind": "class", "doc": "<p>Abstract hyperparameter search class containing functions implemented by HyperC and HyperQ</p>\n", "bases": "naref.abstract.Hyper"}, {"fullname": "naref.quantum.hyper.HyperQ.__init__", "modulename": "naref.quantum.hyper", "qualname": "HyperQ.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">sample_len_list</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">nb_atoms_list</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">N_samples_list</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">inp_duration_list</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">reset_rate_list</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">geometry_list</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">atom_distance_list</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">input_type_list</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">train_len_list</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">test_len_list</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span>)</span>"}, {"fullname": "naref.quantum.hyper.HyperQ.test_parameters", "modulename": "naref.quantum.hyper", "qualname": "HyperQ.test_parameters", "kind": "function", "doc": "<p>Tests a set of parameters by updating self.current and calling save_parameters\nArgs:\n        *tup: iterable of parameters</p>\n\n<p>Returns:\n        all results in a csv file</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">tup</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "naref.quantum.qrc", "modulename": "naref.quantum.qrc", "kind": "module", "doc": "<p>Defines the QRC class and its abstract classes</p>\n"}, {"fullname": "naref.quantum.qrc.QRCTrainer", "modulename": "naref.quantum.qrc", "qualname": "QRCTrainer", "kind": "class", "doc": "<p>Abstract class containing functions implemented by QRC, CRC, LinReg classes</p>\n", "bases": "naref.abstract.Forecaster"}, {"fullname": "naref.quantum.qrc.QRCTrainer.__init__", "modulename": "naref.quantum.qrc", "qualname": "QRCTrainer.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">sample_len</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">8</span>,</span><span class=\"param\">\t<span class=\"n\">nb_atoms</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">9</span>,</span><span class=\"param\">\t<span class=\"n\">N_samples</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1024</span>,</span><span class=\"param\">\t<span class=\"n\">inp_duration</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1000</span>,</span><span class=\"param\">\t<span class=\"n\">reset_rate</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">geometry</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;grid_lattice_centred&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">atom_distance</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">15</span>,</span><span class=\"param\">\t<span class=\"n\">input_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;mackey&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">train_len</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">250</span>,</span><span class=\"param\">\t<span class=\"n\">test_len</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">30</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span>)</span>"}, {"fullname": "naref.quantum.qrc.QRCTrainer.name", "modulename": "naref.quantum.qrc", "qualname": "QRCTrainer.name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "naref.quantum.qrc.QRCTrainer.longname", "modulename": "naref.quantum.qrc", "qualname": "QRCTrainer.longname", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "naref.quantum.qrc.QRCTrainer.inp_duration", "modulename": "naref.quantum.qrc", "qualname": "QRCTrainer.inp_duration", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "naref.quantum.qrc.QRCTrainer.N_samples", "modulename": "naref.quantum.qrc", "qualname": "QRCTrainer.N_samples", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "naref.quantum.qrc.QRCTrainer.sample_len", "modulename": "naref.quantum.qrc", "qualname": "QRCTrainer.sample_len", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "naref.quantum.qrc.QRCTrainer.reset_rate", "modulename": "naref.quantum.qrc", "qualname": "QRCTrainer.reset_rate", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "naref.quantum.qrc.QRCTrainer.train_data", "modulename": "naref.quantum.qrc", "qualname": "QRCTrainer.train_data", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list"}, {"fullname": "naref.quantum.qrc.QRCTrainer.rese_data", "modulename": "naref.quantum.qrc", "qualname": "QRCTrainer.rese_data", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list"}, {"fullname": "naref.quantum.qrc.QRCTrainer.wlist", "modulename": "naref.quantum.qrc", "qualname": "QRCTrainer.wlist", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list"}, {"fullname": "naref.quantum.qrc.QRCTrainer.clist", "modulename": "naref.quantum.qrc", "qualname": "QRCTrainer.clist", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list"}, {"fullname": "naref.quantum.qrc.QRCTrainer.nclist", "modulename": "naref.quantum.qrc", "qualname": "QRCTrainer.nclist", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list"}, {"fullname": "naref.quantum.qrc.QRCTrainer.ncdf", "modulename": "naref.quantum.qrc", "qualname": "QRCTrainer.ncdf", "kind": "variable", "doc": "<p></p>\n", "annotation": ": pandas.core.frame.DataFrame"}, {"fullname": "naref.quantum.qrc.QRCTrainer.X_all_train", "modulename": "naref.quantum.qrc", "qualname": "QRCTrainer.X_all_train", "kind": "variable", "doc": "<p></p>\n", "annotation": ": numpy.ndarray"}, {"fullname": "naref.quantum.qrc.QRCTrainer.w", "modulename": "naref.quantum.qrc", "qualname": "QRCTrainer.w", "kind": "variable", "doc": "<p></p>\n", "annotation": ": numpy.ndarray"}, {"fullname": "naref.quantum.qrc.QRCTrainer.n", "modulename": "naref.quantum.qrc", "qualname": "QRCTrainer.n", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "naref.quantum.qrc.QRCTrainer.geom", "modulename": "naref.quantum.qrc", "qualname": "QRCTrainer.geom", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "naref.quantum.qrc.QRCTrainer.atom_distance", "modulename": "naref.quantum.qrc", "qualname": "QRCTrainer.atom_distance", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "naref.quantum.qrc.QRCTrainer.seq", "modulename": "naref.quantum.qrc", "qualname": "QRCTrainer.seq", "kind": "variable", "doc": "<p></p>\n", "annotation": ": pulser.sequence.sequence.Sequence"}, {"fullname": "naref.quantum.qrc.QRCTrainer.scope", "modulename": "naref.quantum.qrc", "qualname": "QRCTrainer.scope", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "naref.quantum.qrc.QRCTrainer.layout", "modulename": "naref.quantum.qrc", "qualname": "QRCTrainer.layout", "kind": "function", "doc": "<p>Returns the right Register object associated with the lattice of geometry 'self.geom'</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pulser</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"o\">.</span><span class=\"n\">Register</span>:</span></span>", "funcdef": "def"}, {"fullname": "naref.quantum.qrc.QRCTrainer.build_reservoir", "modulename": "naref.quantum.qrc", "qualname": "QRCTrainer.build_reservoir", "kind": "function", "doc": "<p>Encodes input_trunc as input parameters in local pulses and constructs the reservoir from the encoding.\nReturns all measurement outcomes associated with the truncated input</p>\n\n<p>The input is here called truncated, as typically, the total dataset is divided into training and test set.\nEach can therefore be considered as 'truncated'.</p>\n\n<p>Args:\n        inp_trunc: truncated input (cf above)\n        scope: whether to print that we are in the training or testing phase</p>\n\n<p>Returns:\n        the list [lists of the samples of Z_MEASUREMENT( R(window) ) (for each window)]</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">inp_trunc</span><span class=\"p\">:</span> <span class=\"nb\">list</span>, </span><span class=\"param\"><span class=\"n\">scope</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;training&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "naref.quantum.qrc.QRCTrainer.window", "modulename": "naref.quantum.qrc", "qualname": "QRCTrainer.window", "kind": "function", "doc": "<p>For each window (uK ...uK+tau) during the execution,\nwe have to do the sequence of pulses corresponding to R(windowK, rhoK)</p>\n\n<p>Args:\n        k: index of the window (uK ...uK+tau)</p>\n\n<p>Returns:\n        the dict of the samples of Z_MEASUREMENT( R(window) )</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">k</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "naref.quantum.qrc.QRCTrainer.add_to_sequence", "modulename": "naref.quantum.qrc", "qualname": "QRCTrainer.add_to_sequence", "kind": "function", "doc": "<p>For each ui in a given window (uK ...uK+tau), we have to add either a corresponding pulse or a reset.\nArgs:\n        i: index of the input under scrutiny</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">i</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "naref.quantum.qrc.QRCTrainer.train", "modulename": "naref.quantum.qrc", "qualname": "QRCTrainer.train", "kind": "function", "doc": "<p>Executes the training for all inputs in data.\nFills in self.train_data.\nConstructs the optimised weights from the training.\nReturns and displays the final total error (train error).</p>\n\n<p>Args:\n        data: input data\n        train_len: the number of training steps</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">list</span>, </span><span class=\"param\"><span class=\"n\">train_len</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "naref.quantum.qrc.QRCTester", "modulename": "naref.quantum.qrc", "qualname": "QRCTester", "kind": "class", "doc": "<p>Abstract class containing functions implemented by QRC, CRC, LinReg classes</p>\n", "bases": "QRCTrainer"}, {"fullname": "naref.quantum.qrc.QRCTester.__init__", "modulename": "naref.quantum.qrc", "qualname": "QRCTester.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">sample_len</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">8</span>,</span><span class=\"param\">\t<span class=\"n\">nb_atoms</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">9</span>,</span><span class=\"param\">\t<span class=\"n\">N_samples</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1024</span>,</span><span class=\"param\">\t<span class=\"n\">inp_duration</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1000</span>,</span><span class=\"param\">\t<span class=\"n\">reset_rate</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">geometry</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;grid_lattice_centred&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">atom_distance</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">15</span>,</span><span class=\"param\">\t<span class=\"n\">input_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;mackey&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">train_len</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">250</span>,</span><span class=\"param\">\t<span class=\"n\">test_len</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">30</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span>)</span>"}, {"fullname": "naref.quantum.qrc.QRCTester.test_data", "modulename": "naref.quantum.qrc", "qualname": "QRCTester.test_data", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list"}, {"fullname": "naref.quantum.qrc.QRCTester.clist_test", "modulename": "naref.quantum.qrc", "qualname": "QRCTester.clist_test", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list"}, {"fullname": "naref.quantum.qrc.QRCTester.X_all_test", "modulename": "naref.quantum.qrc", "qualname": "QRCTester.X_all_test", "kind": "variable", "doc": "<p></p>\n", "annotation": ": numpy.ndarray"}, {"fullname": "naref.quantum.qrc.QRCTester.evaluate", "modulename": "naref.quantum.qrc", "qualname": "QRCTester.evaluate", "kind": "function", "doc": "<p>Builds the reservoirs associated with the test data. Returns the observed hidden states and the predictions\nArgs:\n        test_data: input data\n        test_len: the number of testing steps</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">test_data</span><span class=\"p\">:</span> <span class=\"nb\">list</span>, </span><span class=\"param\"><span class=\"n\">test_len</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "naref.quantum.qrc.QRC", "modulename": "naref.quantum.qrc", "qualname": "QRC", "kind": "class", "doc": "<p>Abstract class containing functions implemented by QRC, CRC, LinReg classes</p>\n", "bases": "QRCTester"}, {"fullname": "naref.quantum.qrc.QRC.__init__", "modulename": "naref.quantum.qrc", "qualname": "QRC.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">sample_len</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">8</span>,</span><span class=\"param\">\t<span class=\"n\">nb_atoms</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">9</span>,</span><span class=\"param\">\t<span class=\"n\">N_samples</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1024</span>,</span><span class=\"param\">\t<span class=\"n\">inp_duration</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1000</span>,</span><span class=\"param\">\t<span class=\"n\">reset_rate</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">geometry</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;grid_lattice_centred&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">atom_distance</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">15</span>,</span><span class=\"param\">\t<span class=\"n\">input_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;mackey&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">train_len</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">250</span>,</span><span class=\"param\">\t<span class=\"n\">test_len</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">30</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span>)</span>"}, {"fullname": "naref.quantum.qrc.QRC.header", "modulename": "naref.quantum.qrc", "qualname": "QRC.header", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;input_type&#x27;, &#x27;train_len&#x27;, &#x27;test_len&#x27;, &#x27;inp_duration&#x27;, &#x27;N_samples&#x27;, &#x27;sample_len&#x27;, &#x27;reset_rate&#x27;, &#x27;nb_atoms&#x27;, &#x27;geometry&#x27;, &#x27;atom_distance&#x27;, &#x27;train_mae&#x27;, &#x27;test_mae&#x27;]"}, {"fullname": "naref.quantum.qrc.QRC.build_model", "modulename": "naref.quantum.qrc", "qualname": "QRC.build_model", "kind": "function", "doc": "<p>Updates the inner model and returns the predicted test values after fitting on the train\nArgs:\n        inp_train: input train datasest (a temporal serie)\n        inp_test: input test datasest (a temporal serie)</p>\n\n<p>Returns:\n        the predicted test values after fitting on the train ( y_pred_test )</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">inp_train</span><span class=\"p\">:</span> <span class=\"nb\">list</span>, </span><span class=\"param\"><span class=\"n\">inp_test</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "naref.quantum.qrc.QRC.save_data", "modulename": "naref.quantum.qrc", "qualname": "QRC.save_data", "kind": "function", "doc": "<p>Saves the contents of the qrc to a csv file</p>\n\n<p>Args:\n        overwrite: whether to overwrite the file where we would write data, or just append at the end\n        other arguments are ignored</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">overwrite</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">a</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "naref.topology", "modulename": "naref.topology", "kind": "module", "doc": "<p>Defines the auxiliary functions handling lattices</p>\n"}, {"fullname": "naref.topology.grid_lattice", "modulename": "naref.topology", "qualname": "grid_lattice", "kind": "function", "doc": "<p>Returns a dictionary corresponding to a grid lattice.\nAs the Pulser Devices limit the max distance from the origin, it is preferred to use grid_lattice_centred\nArgs:\n        - rows: nbr of rows\n        - columns: nbr of columns\n        - distance: distance between two atoms (nm)\nOutput:\n        - a dictionary that links the name of the atom with its position</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">rows</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">columns</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">distance</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "naref.topology.grid_lattice_centred", "modulename": "naref.topology", "qualname": "grid_lattice_centred", "kind": "function", "doc": "<p>Returns a dictionary corresponding to a grid lattice whose center is in 0.\nArgs:\n                - rows: nbr of rows\n                - columns: nbr of columns\n                - distance: distance between two atoms (nm)\nOutput:\n                - a dictionary that links the name of the atom with its position</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dim</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">distance</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "naref.topology.triangle_lattice", "modulename": "naref.topology", "qualname": "triangle_lattice", "kind": "function", "doc": "<p>Returns a dictionary corresponding to a lattice shaped as a triangle\nfilled with triangles of same dimension.\nArgs:\n        - edge_size: nbr of atoms in the largest row\n        - distance: distance between two atoms (nm)\nOutput:\n        - a dictionary that links the name of the atom with its position</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">edge_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">distance</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "naref.topology.circle_lattice", "modulename": "naref.topology", "qualname": "circle_lattice", "kind": "function", "doc": "<p>Returns a dictionary corresponding to a lattice shaped as a circle\nwhere each point is made of atoms.\nArgs:\n        - nbr_atoms: distance between two atoms\n        - distance: distance between an atom and its nearest neighbours\nOutput:\n        - a dictionary that links the name of the atom with its position</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">nbr_atoms</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">distance</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();